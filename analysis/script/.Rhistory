<<<<<<< HEAD
source('js_variance_in_horstmann.r')
var_in_horstman()
source('js_variance_in_horstmann.r')
var_in_horstman()
source('js_variance_in_horstmann.r')w
source('js_subject_clusters.r')
debug(js_subject_clusters)
js_subject_clusters()
n
Q
js_subject_clusters()
Q
source('js_subject_clusters.r')
js_subject_clusters()
debug(js_subject_clusters)
js_subject_clusters()
n
best_worst
nemae
names(best_worst[['pen']])
help(file.exists)
source('js_subject_clusters.r')
js_subject_clusters()
rm(list = ls())
load('./js_sub_clust.dat')
ls()
score_l
best_worst_g
help(lm)
help(lm.fit)
help(lm.fit)
seq1 = seq(1,10)
seq2 = seq(1,20, by = 2)
seq1
seq2
matplot(rbind(seq1, seq2))
x11()
matplot(rbind(seq1, seq2))
matplot(t(rbind(seq1, seq2)))
x11()
matplot(t(rbind(seq1, seq2)))
ln = lm(c(seq(1,10), seq(1,10)) ~ c(seq1, seq2))
abline(ln)
ln = lm(c(seq1, seq2) ~ c(seq(1,10), seq(1,10)))
abline(ln)
rep(seq(5),2)
best_worst_g
best_worst_g$pen$best
dim(best_worst_g$pen$best)
lm_data = best_worst_g$pen$best[,61:101]
dim(lm_data)
matrix(seq(12), nrow = 3)
a = matrix(seq(12), nrow = 3)
b = matrix(a, nrow = 1)
b
b = matrix(a, nrow = 1, byrow = F)
b
b = matrix(a, nrow = 1, byrow = T)
b
help(matrix)
a
b = matrix(a, nrow = 1, byrow = T)
b
b = matrix(a, nrow = 1, byrow = F)
b
b = matrix(a, ncol = 12, byrow = F)
b
b = matrix(a, ncol = 12, byrow = T)
b
b = matrix(a, ncol = 12, bycol = T)
a
b = matrix(t(a), nrow = 1)
b
lm_data
lm_data
dim(lm_data)
nrow(lm_data)
dim(lm_data)
lm_data2 = matrix(t(lm_data) , nrow =1))
lm_data2 = matrix(t(lm_data) , nrow =1)
lm_data2
ln = lm(lm_data2 ~ rep(seq(61,101), nrow(lm_data)))
ln = lm(lm_data2 ~ rep(seq(6,101), nrow(lm_data)))
ln = lm(lm_data2 ~ rep(seq(61,101), nrow(lm_data)))
ln = lm(lm_data2 ~ rep(seq(60,10), nrow(lm_data)))
ln = lm(lm_data2 ~ rep(seq(60,100), nrow(lm_data)))
dim(lm_data)
dim(lm_data2
)
ln = lm(as.vector(lm_data2) ~ rep(seq(60,100), nrow(lm_data)))
ln
x11()
matplot(t(lm_data))
abline(ln)
ln
ln$coefficients
ln$coefficients[2]
aa = ln$coefficients[2]
aa
ln$coefficients[2,1]
ln$coefficients
names(ln$coefficients)
ln$coefficients[[2]]
best_worst_g
lm_data
best_worst_g
names(best_worst_g)
rbind(NULL, seq(13)
)
help(debug)
source('./js_subject_clusters.r')
debug(js_subject_clusters)
js_subject_clusters
js_subject_clusters()
n
n
source('./js_subject_clusters.r')
debug(js_subject_clusters)
js_subject_clusters()
n
setBreakpoint('./js_subject_clusters.r', line=115)
js_subject_clusters()
n
n
lm_data
dim(lm_data)
Q
source('./js_subject_clusters.r')
js_subject_clusters()
source('./js_subject_clusters.r')
lon = js_subject_clusters()
lon
names(lon)
names(lon$gain)
names(lon$gain$pen)
names(lon$gain$pen$learn)
names(lon$gain$pen$unlearn)
names(lon$gain$pen$random)
dim(lon$gain$pen$unlearn)
dim(lon$gain$pen$random)
dim(lon$gain$pen)
dim(lon$gain$pen$learn)
dim(lon$gain$pen$unlearn)
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$unlearn)w
source('./js_subject_clusters.r')
lon = js_subject_clusters()
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$random)
rownames(lon$gain$pen$learn)
matplot(t(lon$outcome$web$learn))
matplot(t(lon$outcome$web$unlearn))
matplot(t(lon$outcome$web$learn))
matplot(t(lon$outcome$web$random))
x11();matplot(t(lon$outcome$web$random))
x11();matplot(t(lon$outcome$web$learn))
x11();matplot(t(lon$outcome$web$unlearn))
x11();matplot(t(lon$outcome$pen$unlearn))
x11();matplot(t(lon$outcome$pen$learn))
source('./js_subject_clusters.r')
lon = js_subject_clusters()
x11();matplot(t(lon$outcome$pen$learn))
x11();matplot(t(lon$outcome$pen$unlearn))
x11();matplot(t(lon$outcome$pen$unlearn))
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.8)
x11();matplot(t(lon$outcome$pen$unlearn))
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(1.5)
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(5)
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(5)
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(.5)
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(1.2)
x11();matplot(t(lon$outcome$pen$learn))
source('./js_subject_clusters.r')
lon = js_subject_clusters(1.2)
source('./js_subject_clusters.r')
x11();matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(5)
x11();matplot(t(lon$outcome$pen$learn))
[A
lon = js_subject_clusters(5)
source('./js_subject_clusters.r')
source('./js_subject_clusters.r')
lon = js_subject_clusters(5)
source('./js_subject_clusters.r')
lon = js_subject_clusters(5)
lon = js_subject_clusters(5) | less
lon = js_subject_clusters(5);
sink(/tmp/test.txt)
sink('/tmp/test.txt')
lon = js_subject_clusters(5);
sink()
lon = js_subject_clusters(5) | lessw
source('./js_subject_clusters.r')
source('./js_subject_clusters.r')
source('./js_subject_clusters.r')
lon = js_subject_clusters(5
)
setBreakpoint('./js_subject_clusters.r', line=121)
lon = js_subject_clusters(5)
n
slope
n
=======
>>>>>>> bnlearn
slope
lm_data2
lm_data2
lm_data2 = matrix(t(lm_data) , nrow =1)
lm_data
dim(lm_data)
19 * 61
lm(as.vector(lm_data2) ~ rep(seq(41, 101), nrow(lm_data))
)
aaab = lm(as.vector(lm_data2) ~ rep(seq(41, 101), nrow(lm_data)))
aab[[2]]
aaab[[2]]
aaab
names(aaab)
aaab[[1]]
aaab[[1]][[2]]
Q
source('./js_subject_clusters.r')
lon = js_subject_clusters(5)
lon = js_subject_clusters(0.5)
lon = js_subject_clusters(0.5)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.5)
sink('/tmp/test.txt')
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.5)
sink()
lon = js_subject_clusters(0.5)
x11();matplot(t(lon$gain$pen$learn))
x11();matplot(t(lon$gain$pen$unlearn))
x11();matplot(t(lon$gain$pen$learn))
lon$gain$pen$learn
source('./js_subject_clusters.r')
setBreakpoint('./js_subject_clusters.r', line=121)
lon = js_subject_clusters(0.5)
slope
n
slope
slope
n
slope
lm_data2
lm_data
matplot(t(lm_data))
abline(ln)
ln2 = lm(rep(seq(41, 101), nrow(lm_data)) ~ as.vector(lm_data2))
abline(ln2)
ln2
x11()
abline(ln2)
plot()
plot(-100, 100)
abline(ln2)
ln2
abline(ln)
abline(ln)
plot.new
abline(ln)
plot(0,0)
abline(ln)
matplot(t(lm_data))
abline(ln)
abline(ln2)
d = seq(1,10)
d2 = seq(1,40, by=4)
d
d2
matplot(rbind(d,d2)
)
matplot(t(rbind(d,d2)))
ld = lm(c(d1,d2), rep(seq(1,10),2))
ld = lm(c(d,d2), rep(seq(1,10),2))
ld = lm(c(d,d2) ~ rep(seq(1,10),2))
abline(ld)
lm_data2
lm_data
d1 = lm_data[60, ]
d1 = lm_data['60', ]
d4 = lm_data['64', ]
d4 = lm_data['62', ]
matplot(t(rbind(d1,d4)))
ld = lm(c(d1,d4) ~ rep(seq(1,60),2))
ld = lm(c(d1,d4) ~ rep(seq(1,61),2))
abline(ld)
ld[[1]][[2]]
Q
lon = js_subject_clusters(0.5)
Q
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.5)
matplot(t(lon$outcome$web$learn))
matplot(t(lon$outcome$pen$learn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$random))
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$com$unlearn))
matplot(t(lon$gain$com$learn))
lon = js_subject_clusters(0.3)
matplot(t(lon$gain$com$learn))
matplot(t(lon$gain$com$unlearn))
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$learn)
rownames(lon$gain$pen$random)
sub_exp_map
rownames(lon$gain$pen$random)
rownames(lon$gain$pen$random)
rownames(lon$gain$pen$learn)
setBreakpoint('./js_subject_clusters.r', line=121)
lon = js_subject_clusters(0.3)
n
n
n
Q
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.3)
matplot(t(lon$gain$pen$unlearn))
rownames(lon$gain$pen$learn)
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$random)
rownames(lon$gain$pen$unlearn)
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$random))
matplot(t(lon$gain$web$learn))
matplot(t(lon$gain$web$unlearn))
lon = js_subject_clusters(0.1)
matplot(t(lon$gain$web$unlearn))
matplot(t(lon$gain$web$unlearn))
matplot(t(lon$gain$web$learn))
matplot(t(lon$outcome$web$learn))
matplot(t(lon$outcome$web$unlearn))
sink('/tmp/test.txt')
lon = js_subject_clusters(0.1)
lon = js_subject_clusters(0.35)
matplot(t(lon$outcome$web$unlearn))
matplot(t(lon$outcome$web$learn))
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$learn)
sink()
rownames(lon$gain$pen$learn)
rownames(lon$gain$pen$unlearn)
paste0(rownames(lon$gain$pen$unlearn))
paste(rownames(lon$gain$pen$unlearn))
?paste
paste(rownames(lon$gain$pen$unlearn), sep='_')
paste(as.vector(rownames(lon$gain$pen$unlearn)), sep='_')
paste(rownames(lon$gain$pen$unlearn), sep='_')
?paste
?concat
?cat
cat(rownames(lon$gain$pen$unlearn), sep='_')
cat(rownames(lon$gain$pen$unlearn), sep=' ')
source('./js_subject_clusters.r')
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
?cat
paste(rownames(lon$gain$pen$unlearn), sep='_')
a = paste(rownames(lon$gain$pen$unlearn), sep='_')
a
dim(a)
length(a)
source('./js_subject_clusters.r')
sink('/tmp/test.txt')
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
sink()
lon = js_subject_clusters(0.35)
matplot(t(lon$outcome$web$learn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$outcome$pen$unlearn))
matplot(t(lon$outcome$pen$learn))
matplot(t(lon$outcome$pen$unlearn))
matplot(t(lon$gain$pen$learn))
sink('/tmp/test.txt')
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
setBreakpoint('./js_subject_clusters.r', line=119)
lon = js_subject_clusters(0.35)
sub_indx
n
sink()
sub_indx
lm_data
dim(lm_data)
Q
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
lon
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
lon = js_subject_clusters(0.35)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.35)
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$learn))
lon = js_subject_clusters(0.1)
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
rownames(lon$gain$pen$learn)
rownames(lon$gain$pen$learn)
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$learn))
lon = js_subject_clusters(0.2)
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$unlearn))
lon = js_subject_clusters(0.11)
matplot(t(lon$gain$pen$unlearn))
matplot(t(lon$gain$pen$learn))
rownames(lon$gain$pen$learn)
rownames(lon$gain$pen$unlearn)
rownames(lon$gain$pen$random)
lon = js_subject_clusters(0.09)
matplot(t(lon$gain$pen$learn))
lon = js_subject_clusters(0.09)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.09)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.09)
lon = js_subject_clusters(0.09)
?lm
lon = js_subject_clusters(0.09)
traceback()
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.09)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.09)
matplot(t(lon$gain$pen$learn))
matplot(t(lon$gain$pen$learn))
matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(0.3)
matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(0.5)
matplot(t(lon$outcome$pen$learn))
matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(0.7)
matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(0.7)
matplot(t(lon$outcome$pen$learn))
lon = js_subject_clusters(0.1)
source('./js_subject_clusters.r')
lon = js_subject_clusters(0.1)
lon = js_subject_clusters(0.7)
lon = js_subject_clusters(0.35)
matplot(t(lon$outcome$pen$learn))
matplot(t(lon$gain$pen$learn))
?gray.colors
<<<<<<< HEAD
library('foreign')
t = read.octave("~/doc/ms/thesis/all_in_one/data/payam/all.dat");
t
t$b
t$b
t$b
data.frame(t$b)
names(data.frame(t$b))
sn
rownames(data.frame(t$b))
df = data.frame(t$b)
df["ID"] = rownames(df)
df
names(df)
sub_exp_map
sdf = data.frame(sub_exp_map)
sdf
rownames(sdf)
sdf["ID"] = rownames(sdf)
sdf
sdf
df
merge(sdf, df, by = "ID")
mdf = merge(sdf, df, by = "ID")
names(mdf)
head(mdf)
colnames(dat)
df
ls()
mdf
colnames(mdf)
colnames(mdf) = c("salam", "khar")
colnames
colnames(mdf)
a = c("salam", "bagh")
d = c("gd", a)
d
d[2]
d[3]
d[1]
=======
source('./js_subject_clusters.r')
source('./bn_simple_model.r')
source('./bn_simple_model.r')
bn_analysis()
source('./bn_simple_model.r')
source('./bn_simple_model.r')
da = bn_analysis();
library(MASS)
?write.matri
?write.matrix
load('bn_data.dat')
dat
dim(da)
dim(dat)
99.aschar()
?aschar
?as.matrix
?as.char
a = c(23,54,3,54)
lapply(a, functoin(x) {intToUtf8(x)})
lapply(a, function(x) {intToUtf8(x)})
a = c(100,97,98,99)
lapply(a, function(x) {intToUtf8(x)})
unlist(lapply(a, function(x) {intToUtf8(x)}))
paste0(unlist(lapply(a, function(x) {intToUtf8(x)})))
paste0(unlist(lapply(a, function(x) {intToUtf8(x)})), sep = "")
paste(unlist(lapply(a, function(x) {intToUtf8(x)})), sep = "")
b = paste(unlist(lapply(a, function(x) {intToUtf8(x)})), sep = "")
b
b[1]
?paste0
paste0(a)
?paste0
paste(unlist(lapply(a, function(x) {intToUtf8(x)})), sep = "")
paste(unlist(lapply(a, function(x) {intToUtf8(x)})))
paste(lapply(a, function(x) {intToUtf8(x)}))
paste(lapply(a, function(x) {intToUtf8(x)}))
cat(lapply(a, function(x) {intToUtf8(x)}))
paste0(lapply(a, function(x) {intToUtf8(x)}))
paste0(lapply(a, function(x) {intToUtf8(x)}), collapse = '')
a = t(seq(10,20))
a
a = t(a)
a
paste0(lapply(a, function(x) {intToUtf8(x)}), collapse = '')
b = a + 12
b
data.frame(a = a, b = b)
sub_exp_map
apply(dat, 1, function(a) {paste0(lapply(a, function(x) {intToUtf8(x)}), collapse = '')})
b = apply(dat, 1, function(a) {paste0(lapply(a, function(x) {intToUtf8(x)}), collapse = '')})
dim(b)
names(b)
b = data.frame(choices = b)
b
sub_exp_map
c = data.frame(group = sub_exp_map)
c
c
c = data.frame(group = sub_exp_map)
c
names(sub_exp_map
)
c = data.frame(group = sub_exp_map["exp"])
c
c = data.frame(group = sub_exp_map[["exp"]])
c
b
merge(b,c)
(b,c)
merge(b,c,by=0)
merge(b,c,by=0)(1)
merge(b,c,by=0)[1]
merge(b,c,by=0)[1,]
merge(b,c,by=0)
d = merge(b,c,by=0)
write.table(d, "/tmp/d.txt", ",")
write.table(d, file="/tmp/d.txt", ",")
write.table(d, file="test.txt", ",")
?write.table
write.csv2(d, file="test.txt", ",")
write.csv2(d, file="/tmp/test.txt", ",")
write.csv(d, file="/tmp/test.txt", ",")
write.csv(d, file="/tmp/test.csv", ",")
write.csv(d, file = paste("file", x, ".csv", sep=""))
write.csv(d, file = paste("file", ".csv", sep=""))
a = seq(4)
a
b = data.frame(to = a, from = a)
b
c = data.frame(to = t(a), from = t(a))
c
c = data.frame(to = a+4, from = a+54)
c
rbind(b,c)
a = c("a","b","c")
b = data.frame(to = a, from = b)
b = data.frame(to = a, from = a)
b
c = data.frame(to = a, from = a)
rbind(b,c)
?rbind
d = list(b,c)
d
rbind(d)
rbind(unlist(d))
rbind(unlist(d))
abind(unlist(d))
library(abind)
abind(unlist(d))
abind(unlist(d),along=1)
unlist(d)
d
unlist(d)
unlist(d)
d
unlist(d)
?unlist
do.call(rbind, d)
source('./bn_simple_model.r')
source('./helper/dat_to_csv.r')
dat_to_csv()
da = dat_to_csv()
da
head(da)
da[id=7,,]
dim(da)
summary(da)
source('./helper/dat_to_csv.r')
da = dat_to_csv()
da
dim(da)
summary(da)
da[,,94]
da[id=95]
da
da
write.csv(da)
?write.csv
write.csv(da, row.names = F)
source('./helper/dat_to_csv.r')
write.csv(da, row.names = F)
da = dat_to_csv()
?write.csv
source('./helper/dat_to_csv.r')
da = dat_to_csv()
?write.csv
read.csv('/tmp/outcome.csv', header = F)
da = read.csv('/tmp/outcome.csv', header = F)
dim(da)
da[3,]
plot(da[3,])
plot(da[3,])
x11()
plot(da[3,])
plot(da[3,])
da[3,]
lapply(da[3,], function(x) { if (x) 1 else 0 });
unlist(lapply(da[3,], function(x) { if (x) 1 else 0 });)
unlist(lapply(da[3,], function(x) { if (x) 1 else 0 }))
pa  = unlist(lapply(da[3,], function(x) { if (x) 1 else 0 }))
plot(pa)
da[3,3
da[3,]
pa  = unlist(lapply(da[3,], function(x) { if (x) 1 else 0 }))
pa
pa  = unlist(lapply(da[3,], function(x) { if (x){ 1 }else{ 0 }}))
pa
pa  = unlist(lapply(da[3,], function(x) { if (x == true) 1 else 0 })
pa
pa  = unlist(lapply(da[3,], function(x) { if (x == true) 1 else 0 }))
pa  = unlist(lapply(da[3,], function(x) { if (x == "true") 1 else 0 }))
pa
plot(pa)
da
library('arima')
ar1.sim1 <- arima.sim(list(ar=0.95), n=200)
# AR(1) -- alpha=0.95
#postscript("ar1-1.ps", paper='special', height=6, width=6, horizontal=F)
plot(ar1.sim1)
#dev.off()
print(arima(ar1.sim1, order=c(1,0,0)))
ar1.sim2 <- arima.sim(list(ar=0.5), n=200)
# AR(1) -- alpha=0.5
#postscript("ar1-2.ps", paper='special', height=6, width=6, horizontal=F)
plot(ar1.sim2)
#dev.off()
print(arima(ar1.sim2, order=c(1,0,0)))
ar2.sim <- arima.sim(list(ar=c(0.9,-0.2)), n=200)
# AR(2) -- alpha1=0.9, alpha2=-0.2
#postscript("ar2.ps", paper='special', height=6, width=6, horizontal=F)
plot(ar2.sim)
#dev.off()
print(ar(ar2.sim, order.max=9))
arma.sim <- arima.sim(list(ar=c(0.9,-0.2), ma=c(1,2,4,3)), n=200)
# ARMA(2,4)
#postscript("arma.ps", paper='special', height=6, width=6, horizontal=F)
plot(arma.sim)
#dev.off()
print(arima(arma.sim, order=c(2,0,4)))
?arima
View(da)
data(alarm)
library(bnlearn(
library(bnlearn)
data(alarm(
data(alarm)
summary(alarm)
iamb(alarm)
pa = iamb(alarm)
plot(pa)
alarm
source('./bn_simple_model.r')
source('./bn_feature_visualizer.r')
run_bn_vis()
run_bn_vis()
var(c(0,0,0,0,0,12.5))
var(c(0,2,0,4,3,2.5))
mean(c(9,9,5,5))
variance(c(9,9,5,5))
var(c(9,9,5,5))
lapply(c(9,9,5,5), function(x) { (x - 7) * (x - 7) })
?var
var(c(1,1,1))
var(c(1,2,1))
var(c(1,1,1))
?var
var(c(1,1,1))
var(c(9,9,5,5))
16 /3
var(c(0,0,150,0,300, 0, 200, 0, 250))
mean(c(0,0,150,0,300, 0, 200, 0, 250))
var(c(1))
source('./bn_feature_visualizer.r')
run_bn_vis()
igt_path <<- /tmp/
igt_path <<- "/tmp/"
run_bn_vis()
fg
1 - (0.75) ^ 3
(0.75) ^ 3
1 - (0.75) ^ 3
source('./bn_feature_visualizer.r')
run_bn_vis()
run_bn_vis()
1 - (0.75) ^ 2
run_bn_vis()
run_bn_vis()
>>>>>>> bnlearn
